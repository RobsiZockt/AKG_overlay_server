const { useEffect, useState } = React;

(function () {
  
let SetPlayers_EXT;
let SetTeam_EXT;
let latestJson;

function waitForContainer(id, callback) {
  const interval = setInterval(() => {
    const ex = document.getElementById(id);
    if (ex) {
      clearInterval(interval);
      callback(ex);
    }
  }, 100); //100ms pulling rate
}

const iconMap={
  1: "../img/icons/Tank_icon.svg",
  2: "../img/icons/Damage_icon.svg",
  3: "../img/icons/Damage_icon.svg",
  4: "../img/icons/Support_icon.svg",
  5: "../img/icons/Support_icon.svg",
}

const cleanup = window.subscribePlayers((data) => {
    latestJson = data;
    SetPlayers_EXT(latestJson);
    console.log(data);
});

//Import hero picker from control
//Make all textfields save / send on enter and blur
//make layout
//display the position on the very top of each picker
//picker gets generated by loop 1-5 (we will handle the sub picker later) loop also gives picker an id
//picker id gets send together with data so backend knows what to do
//roles as multi select checkboxes (=> backend if all res = "Flex" (at least for id 5+))

function Versus_Setup() {
  const [site,setSite] = useState("1");
  const [team, setTeam] = useState("blue");
  const [players, setPlayers] = useState({});
  const [queries, setQueries] = useState({s1:"",s2:"",s3:"",s4:"",s5:""});
  const [results, setResults] = useState({s1:[],s2:[],s3:[],s4:[],s5:[]});
  const [data,setData] =useState([]);

  React.useEffect(() => {
    SetPlayers_EXT = setPlayers;
  }, [setPlayers]);

  React.useEffect(()=>{
SetTeam_EXT=setTeam;
  },[setTeam]);

useEffect(() => {
      // Fetch JSON from backend
      fetch("/api/heros") // adjust this URL to your backend
        .then((res) => res.json())
        .then((json) => {
          const arrayData = Object.entries(json).map(([id, value]) => ({
            id: id,
            ...value,
          }));
          setData(arrayData);
          setResults(arrayData); // show all initially
        })
        .catch((err) => console.error("Error fetching JSON:", err));
    }, []);

   
  useEffect(() => {
    async function fetchData() {
      try {
        const response = await fetch("/api/players");
        if (!response.ok)
          throw new Error(`HTTP error! Status: ${response.status}`);
        const data = await response.json();
        setPlayers(data);
      } catch (err) {
        console.error("Error fetching data:", err);
      }
    }
    fetchData();
  }, []);

    useEffect(() => {
  if (!data) return; // wait until data is loaded

  const fuse = new Fuse(data, {
    keys: ["name"], // search key
    threshold: 0.3,
  });

  const newResults = {};

  Object.keys(queries).forEach((key) => {
    if (!queries[key]) {
      newResults[key] = data; // return all if empty
    } else {
      newResults[key] = fuse.search(queries[key]).map((r) => r.item);
    }
  });

  setResults(newResults);
}, [queries, data]);

const handleTeamSelect = (team)=>{
setTeam(team);
setSite("1");
};

const handleSearchChange = (key, value) => {
  setQueries((prev) => ({ ...prev, [key]: value }));
};

const handleImageClick=(player_id, img_id)=>{
 UpdatePlayers(team, player_id,"main",img_id);

};

const UpdatePlayers=async (team, player_id,item,val)=>{

  const data = {[item]:val}

  const response = await fetch(`/api/players/${team}/${player_id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    })

};


async function swapSites(){
if(site ==="1") setSite("2");
else if(site ==="2") setSite("1");
else console.error("Manipulation Detected");
}

 async function addPlayer(id){
  const response = await fetch(`/api/players/${team}/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
    })
}

async function deletePlayer(id) {
  const response = await fetch(`/api/players/${team}/${id}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
      },
    })
}

const renderGap =(id,team,start_id)=>{
  let colorloockup=[];
  if(team ==="blue"){
colorloockup[0]="blue-700";
} else if(team ==="red"){
  colorloockup[0]="red-700";
};

  return  h("div",{id: id, className:`h-full w-[20%] flex justify-center items-center bg-${colorloockup[0]}/40`}, 
    h("button",{id: "new_player",className:"bg-gray-300 w-[80%] h-[7%] text-white px-4 py-2 rounded hover:bg-gray-200 transition",onClick:()=> addPlayer(id)},"Add Player"),
  )
}

const renderPlayers= (p,team,start_id,dif)=>{
let colorloockup=[];
  if(team ==="blue"){
colorloockup[0]="blue-700";
} else if(team ==="red"){
  colorloockup[0]="red-700";
};

const search_id = "s"+ (parseInt(p.id)-start_id);


  return h("div",{id: p.id, className:`h-full w-[20%] flex flex-1 flex-col bg-${colorloockup[0]}`},
  h("img",{id:`role`, className:"h-[5%] w-full bg-[#000000aa]", src: iconMap[p.id]}),
    h("input", {type: "text", placeholder: "UserName", value: p.name , onChange: (e) => {
      const updatedPlayers= {...players};
      updatedPlayers[team][p.id-1-dif] = {...p, name: e.target.value};
      setPlayers(updatedPlayers);
      },onBlur:(e)=>{
        UpdatePlayers(team, p.id,"name",e.target.value);
      },className: "border border-[#939497] p-2 w-full mb-4 rounded bg-[#3b3b3b]",}),
    //modified code from hero picker
    h("div",{id:"Mainpicker", className:"h-[60%] w-full flex flex-col"},
      h("input", {
        type: "text",
        placeholder: "Search images...",
        value: queries[search_id],
        onChange: (e) => handleSearchChange(search_id, e.target.value),
        className: "border border-[#939497] p-2 w-full mb-4 rounded bg-[#3b3b3b]",
      }),
      h("div",{className: "grid grid-cols-2 md:grid-cols-4 gap-2 overflow-y-auto",style: { flex: "1 1 auto", maxHeight: "calc(2*10rem+2rem" },},
        results[search_id]?.map((item, idx) => {
        const isHighlighted = item.path === p.main;
          return h("div",{key: idx,
            className:"flex flex-col items-center p-1 rounded cursor-pointer transition-shadow ",
            onClick: () => handleImageClick(p.id, item.id),
            },[
                   
              h("img", {src: item.path,alt: item.name,className:"w-full h-auto object-cover rounded shadow " + (isHighlighted ? "ring-4 ring-[#35a652]" : ""),
                }),
              h("p", { className: "mt-2 text-white text-sm" }, item.name),
            ]
          );
        })
      ),
    ),
    h("input", {type: "text", placeholder: "Roles", value: p.role , onChange: (e) => {
      const updatedPlayers= {...players};
      updatedPlayers[team][p.id - 1 -dif] = {...p, role: e.target.value};
      setPlayers(updatedPlayers);
      },onBlur:(e)=>{
        UpdatePlayers(team, p.id,"role",e.target.value);
      },className: "border border-[#939497] p-2 w-full mb-4 rounded bg-[#3b3b3b]",}
    ),          
    h("input", {type: "text", placeholder: "Extra Info", value: p.extra , onChange: (e) => {
      const updatedPlayers= {...players};
      updatedPlayers[team][p.id-1-dif] = {...p, extra: e.target.value};
      console.log(updatedPlayers, p.id-1-dif);
      setPlayers(updatedPlayers);
    },onBlur:(e)=>{
      UpdatePlayers(team, p.id,"extra",e.target.value);
      },className: "border border-[#939497] p-2 w-full mb-4 rounded bg-[#3b3b3b]",}
     ),
     p.id>5?h("button",{id: "new_player",className:"bg-red-300 w-[80%] h-[7%] text-white px-4 py-2 rounded hover:bg-red-200 transition",onClick:()=> deletePlayer(p.id-dif)},"DeletePlayer"):null,
  )

}

const renderTeam = (team)=>{
  let first=0;
  if(site==="1") first=0;
  else if(site==="2") first=5;
    if(team === "blue"){
      if( players.blue){
        let latest=first;
        let skipp_amount =0;
        return  h(React.Fragment,null, players.blue.map((p) => {
          if(p.id<=first)return null;
          if(p.id >first+5) return null;

          if(p.id !==latest+1){
            const div= p.id-latest-1;
            skipp_amount += div;
            if(div<=0) return null;

            console.log("asd",skipp_amount,div);
            latest = p.id;
            console.log("fde",p.id, latest);
            const skips= Array.from({length: div},(_,i) =>{
              return renderGap(latest-div,team,5);
            });
            
            return h(React.Fragment,null, ...skips, renderPlayers(p,team,first,skipp_amount));
          }
          latest = p.id;
          return h(React.Fragment,null,renderPlayers(p,team,first,skipp_amount));
          
        }),(h_id = players.blue[players.blue.length-1].id) !== 10?(()=>{
          const div= first+5 - h_id;
            const skips= Array.from({length: div},(_,i) =>{
              return renderGap(h_id+div,team,5);
            });
            return h(React.Fragment,null, ...skips);
        })():null,
            
          

      )
      }
    } else if (team === "red"){
      if(players.red){
        let latest=first;
        let skipp_amount =0;
        return  h(React.Fragment,null, players.red.map((p) => {
          if(p.id<=first)return null;
          if(p.id >first+5) return null;

          if(p.id !==latest+1){
            const div= p.id-latest-1;
            skipp_amount += div;
            if(div<=0) return null;
            console.log("fde",p.id, p.id-latest);
            console.log("asd",skipp_amount,div);
            latest = p.id;
            const skips= Array.from({length: div},(_,i) =>{
              return renderGap(latest-div,team,5);
            });
            
            return h(React.Fragment,null, ...skips, renderPlayers(p,team,first,skipp_amount));
          }
          latest = p.id;

          return h(React.Fragment,null,renderPlayers(p,team,first,skipp_amount));
          
        }),(h_id = players.red[players.red.length-1].id) !== 10?(()=>{
          const div= first+5 - h_id;
            const skips= Array.from({length: div},(_,i) =>{
              return renderGap(h_id+div,team,5);
            });
            return h(React.Fragment,null, ...skips);
        })():null,
            
          

      )
      }
    }
  
}


  
  return h("div",{ id: "container", className: "h-[70%] w-[90%]  rounded-xl" },
    h("div",{id: "team-select",className: "flex h-[10%] w-full bg-sky-700 rounded-t-xl items-center justify-center",},
      h("button",{id: "select-blue",className: `h-[90%] w-auto ${team === "blue" ? "text-white" : "text-gray-700"} text-xl px-4 py-2`,onClick: () => handleTeamSelect("blue")},"Blue Team"),
      h("button",{id: "select-red",className: `h-[90%] w-auto ${team === "red" ? "text-white" : "text-gray-700"} text-xl px-4 py-2`,onClick: () => handleTeamSelect("red")},"Red Team")
    ),
    h("div",{id:"edit", className:"h-[90%] w-full flex items-center"},
    h("div",{ id: "player-cluster", className: "h-full w-[90%] flex space-x-2" },
      
      team === "blue"? renderTeam(team):team ==="red"? renderTeam(team):null,
    ),
    h("button",{className:" h-[7%] w-[10%] bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition flex justify-center",
      onClick: () => swapSites(),
      },
      "Swap Sides"
    ),
  ),
  );
}

waitForContainer("versus_setup", (container) => {
  const root = ReactDOM.createRoot(container);
  root.render(h(Versus_Setup));
});
})();
