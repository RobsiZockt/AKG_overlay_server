const { useEffect, useState } = React;

(function () {
  
let team_Ext;

function waitForContainer(id, callback) {
  const interval = setInterval(() => {
    const ex = document.getElementById(id);
    if (ex) {
      clearInterval(interval);
      callback(ex);
    }
  }, 100); //100ms pulling rate
}

const iconMap={
  1: "../img/icons/Tank_icon.svg",
  2: "../img/icons/Damage_icon.svg",
  3: "../img/icons/Damage_icon.svg",
  4: "../img/icons/Support_icon.svg",
  5: "../img/icons/Support_icon.svg",
}


//Import hero picker from control
//Make all textfields save / send on enter and blur
//make layout
//display the position on the very top of each picker
//picker gets generated by loop 1-5 (we will handle the sub picker later) loop also gives picker an id
//picker id gets send together with data so backend knows what to do
//roles as multi select checkboxes (=> backend if all res = "Flex" (at least for id 5+))

function Versus_Setup() {
  const [team, setTeam] = useState("blue");
  const [players, setPlayers] = useState({});
  const [queries, setQueries] = useState({s1:"",s2:"",s3:"",s4:"",s5:""});
  const [results, setResults] = useState({s1:[],s2:[],s3:[],s4:[],s5:[]});
  const [data,setData] =useState([]);

  React.useEffect(() => {
    team_Ext = team;
  }, [team]);

useEffect(() => {
      // Fetch JSON from backend
      fetch("/api/heros") // adjust this URL to your backend
        .then((res) => res.json())
        .then((json) => {
          const arrayData = Object.entries(json).map(([id, value]) => ({
            id: id,
            ...value,
          }));
          setData(arrayData);
          setResults(arrayData); // show all initially
        })
        .catch((err) => console.error("Error fetching JSON:", err));
    }, []);

   
  useEffect(() => {
    async function fetchData() {
      try {
        const response = await fetch("/api/players");
        if (!response.ok)
          throw new Error(`HTTP error! Status: ${response.status}`);
        const data = await response.json();
        setPlayers(data);
      } catch (err) {
        console.error("Error fetching data:", err);
      }
    }
    fetchData();
  }, []);

    useEffect(() => {
  if (!data) return; // wait until data is loaded

  const fuse = new Fuse(data, {
    keys: ["name"], // search key
    threshold: 0.3,
  });

  const newResults = {};

  Object.keys(queries).forEach((key) => {
    if (!queries[key]) {
      newResults[key] = data; // return all if empty
    } else {
      newResults[key] = fuse.search(queries[key]).map((r) => r.item);
    }
  });

  setResults(newResults);
}, [queries, data]);



const handleSearchChange = (key, value) => {
  setQueries((prev) => ({ ...prev, [key]: value }));
};

const handleImageClick=(player_id, img_id)=>{


};


  
  return h(
    "div",
    { id: "container", className: "h-[70%] w-[90%]  rounded-xl" },
    h("div",{id: "team-select",className: "flex h-[10%] w-full bg-sky-700 rounded-t-xl items-center justify-center",},
      h("button",{id: "select-blue",className: `h-[90%] w-auto ${team === "blue" ? "text-white" : "text-gray-700"} text-xl px-4 py-2`,},"Blue Team"),
      h("button",{id: "select-red",className: `h-[90%] w-auto ${team === "red" ? "text-white" : "text-gray-700"} text-xl px-4 py-2`,},"Red Team")
    ),
    h("div",{ id: "edit-cluster", className: "h-[90%] w-[90%] flex space-x-2" },
      players.blue ? players.blue.map((p) => {
        if(p.id >5) return null;
        
        return h("div",{id: p.id, className:" h-full w-[20%] flex flex-1 flex-col bg-green-700"},
          h("img",{id:`role`, className:"h-[5%] w-full bg-blue-700", src: iconMap[p.id]}),
          h("input", {type: "text", placeholder: "UserName", value: p.name , onChange: (e) => {
            const updatedPlayers= {...players};
            updatedPlayers.blue[p.id - 1] = {...p, name: e.target.value};
            setPlayers(updatedPlayers);
          },className: "border border-[#939497] p-2 w-full mb-4 rounded bg-[#3b3b3b]",}),
          //modified code from hero picker
          h("div",{id:"Mainpicker", className:"h-[60%] w-full flex flex-col"},
            h("input", {
              type: "text",
              placeholder: "Search images...",
              value: queries["s"+p.id],
              onChange: (e) => handleSearchChange("s"+p.id, e.target.value),
              className: "border border-[#939497] p-2 w-full mb-4 rounded bg-[#3b3b3b]",
            }),
            h("div",{className: "grid grid-cols-2 md:grid-cols-4 gap-2 overflow-y-auto",style: { flex: "1 1 auto", maxHeight: "calc(2*10rem+2rem" },},
              results["s"+p.id]?.map((item, idx) => {
                return h("div",{key: idx,
                    className:"flex flex-col items-center p-1 rounded cursor-pointer transition-shadow ",
                    onClick: () => handleImageClick(p.id, item.id),
                  },[
                  h("img", {src: item.path,alt: item.name,className:"w-full h-auto object-cover rounded shadow ",
                  }),
                  h("p", { className: "mt-2 text-white text-sm" }, item.name),
                  ]
                );
              })
            ),
          ),
            h("input", {type: "text", placeholder: "Roles", value: p.role , onChange: (e) => {
            const updatedPlayers= {...players};
            updatedPlayers.blue[p.id - 1] = {...p, role: e.target.value};
            setPlayers(updatedPlayers);
          },className: "border border-[#939497] p-2 w-full mb-4 rounded bg-[#3b3b3b]",}),
          
          h("input", {type: "text", placeholder: "Extra Info", value: p.extra , onChange: (e) => {
            const updatedPlayers= {...players};
            updatedPlayers.blue[p.id - 1] = {...p, extra: e.target.value};
            setPlayers(updatedPlayers);
          },className: "border border-[#939497] p-2 w-full mb-4 rounded bg-[#3b3b3b]",}),
        )
      }) : players.red ? players.red.map((p)=>{

      }):null
    )
  );
}

waitForContainer("versus_setup", (container) => {
  const root = ReactDOM.createRoot(container);
  root.render(h(Versus_Setup));
});
})();
